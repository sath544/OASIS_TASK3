import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from wordcloud import WordCloud
from sklearn.preprocessing import LabelEncoder
import nltk
nltk.download('vader_lexicon')
apps_df = pd.read_csv(r"C:\Users\nandi\OneDrive\Desktop\oasis\TASK8\apps.csv")  # Replace with your file path
reviews_df = pd.read_csv(r"C:\Users\nandi\OneDrive\Desktop\oasis\TASK8\user_reviews.csv")  # Replace with your file path
apps_df.drop_duplicates(inplace=True)
apps_df.dropna(inplace=True)
apps_df['Reviews'] = pd.to_numeric(apps_df['Reviews'], errors='coerce')
apps_df['Installs'] = apps_df['Installs'].str.replace('[+,]', '', regex=True).astype(float)
apps_df['Price'] = apps_df['Price'].str.replace('$', '', regex=True).astype(float, errors='ignore')
apps_df['Size'] = apps_df['Size'].fillna('').astype(str)
apps_df['Size'] = apps_df['Size'].replace("Varies with device", np.nan)
size_multiplier = apps_df['Size'].str.extract(r'([\d\.]+)([kM]+)', expand=True)
apps_df['Size'] = apps_df['Size'].str.replace(r'[kM]+$', '', regex=True)  
apps_df['Size'] = pd.to_numeric(apps_df['Size'], errors='coerce')  
apps_df['Size'] = apps_df['Size'] * size_multiplier[1].replace({'k': 10**3, 'M': 10**6}).fillna(1).astype(float)
apps_df['Last Updated'] = pd.to_datetime(apps_df['Last Updated'], errors='coerce')
plt.figure(figsize=(12, 6))
sns.countplot(data=apps_df, y='Category', order=apps_df['Category'].value_counts().index, palette='viridis')
plt.title("App Distribution Across Categories")
plt.xlabel("Number of Apps")
plt.ylabel("Category")
plt.tight_layout()
plt.show()
plt.figure(figsize=(8, 5))
sns.histplot(apps_df['Rating'], bins=20, kde=True, color='skyblue')
plt.title("App Ratings Distribution")
plt.xlabel("Rating")
plt.ylabel("Frequency")
plt.show()
plt.figure(figsize=(10, 6))
sns.scatterplot(data=apps_df, x='Size', y='Rating', hue='Category', alpha=0.7)
plt.title("Size vs Rating Across Categories")
plt.xlabel("Size (in MB)")
plt.ylabel("Rating")
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
reviews_df.dropna(subset=['Translated_Review'], inplace=True)
sid = SentimentIntensityAnalyzer()
reviews_df['Sentiment_Score'] = reviews_df['Translated_Review'].apply(lambda x: sid.polarity_scores(x)['compound'])
reviews_df['Sentiment'] = reviews_df['Sentiment_Score'].apply(lambda x: 'Positive' if x > 0 else 'Negative' if x < 0 else 'Neutral')
plt.figure(figsize=(8, 5))
sns.countplot(data=reviews_df, x='Sentiment', palette='coolwarm')
plt.title("User Review Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()
text = " ".join(review for review in reviews_df['Translated_Review'])
wordcloud = WordCloud(background_color="white", max_words=500, contour_width=3, contour_color='steelblue').generate(text)
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()
sns.pairplot(apps_df[['Rating', 'Reviews', 'Installs', 'Price']], diag_kind='kde', palette='viridis')
plt.suptitle("Pair Plot for Key Metrics", y=1.02)
plt.show()
le = LabelEncoder()
apps_df['Category'] = le.fit_transform(apps_df['Category'])
print("Data Preparation and Analysis Complete!")
